import React, { useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Coins, Leaf, Recycle, X, Sparkles } from 'lucide-react';
import { PackagingOption } from './EcoPackagingEngine';

type Language = "en" | "hi" | "ta" | "te" | "bn";

interface EcoCoinsRewardProps {
  option: PackagingOption;
  selectedLanguage: Language;
  onClose: () => void;
}

const translations = {
  en: {
    congratulations: "Congratulations!",
    coinsEarned: "Eco-Coins Earned",
    impactMessage: "Your sustainable choice made a difference!",
    co2Saved: "COтВВ Saved",
    benefits: "Environmental Benefits",
    lowCarbon: "Low carbon footprint",
    compostable: "Compostable materials",
    recyclable: "Fully recyclable",
    plasticFree: "Plastic-free option",
    continue: "Continue",
    bonusRewards: "Bonus Rewards"
  },
  hi: {
    congratulations: "рдмрдзрд╛рдИ рд╣реЛ!",
    coinsEarned: "рдЕрд░реНрдЬрд┐рдд рдЗрдХреЛ-рдХреЙрдЗрди",
    impactMessage: "рдЖрдкрдХреА рдЯрд┐рдХрд╛рдК рдкрд╕рдВрдж рдиреЗ рдлрд░реНрдХ рдкреИрджрд╛ рдХрд┐рдпрд╛!",
    co2Saved: "рдмрдЪрд╛рдпрд╛ рдЧрдпрд╛ COтВВ",
    benefits: "рдкрд░реНрдпрд╛рд╡рд░рдгреАрдп рд▓рд╛рдн",
    lowCarbon: "рдХрдо рдХрд╛рд░реНрдмрди рдлреБрдЯрдкреНрд░рд┐рдВрдЯ",
    compostable: "рдХрдореНрдкреЛрд╕реНрдЯреЗрдмрд▓ рд╕рд╛рдордЧреНрд░реА",
    recyclable: "рдкреВрд░реНрдгрддрдГ рдкреБрдирд░реНрдЪрдХреНрд░рдг рдпреЛрдЧреНрдп",
    plasticFree: "рдкреНрд▓рд╛рд╕реНрдЯрд┐рдХ рдореБрдХреНрдд рд╡рд┐рдХрд▓реНрдк",
    continue: "рдЬрд╛рд░реА рд░рдЦреЗрдВ",
    bonusRewards: "рдмреЛрдирд╕ рд░рд┐рд╡рд╛рд░реНрдбреНрд╕"
  },
  ta: {
    congratulations: "ро╡ро╛ро┤рпНродрпНродрпБроХрпНроХро│рпН!",
    coinsEarned: "роЪроорпНрокро╛родро┐родрпНрод роИроХрпЛ-роиро╛рогропроЩрпНроХро│рпН",
    impactMessage: "роЙроЩрпНроХро│рпН роиро┐ро▓рпИропро╛рой родрпЗро░рпНро╡рпБ рооро╛ро▒рпНро▒родрпНродрпИ роПро▒рпНрокроЯрпБродрпНродро┐ропродрпБ!",
    co2Saved: "роЪрпЗрооро┐родрпНрод COтВВ",
    benefits: "роЪрпБро▒рпНро▒рпБроЪрпНроЪрпВро┤ро▓рпН роиройрпНроорпИроХро│рпН",
    lowCarbon: "роХрпБро▒рпИроирпНрод роХро╛ро░рпНрокройрпН родроЯроорпН",
    compostable: "роЙро░рооро╛роХрпНроХроХрпНроХрпВроЯро┐роп рокрпКро░рпБроЯрпНроХро│рпН",
    recyclable: "роорпБро┤рпБроорпИропро╛роХ рооро▒рпБроЪрпБро┤ро▒рпНроЪро┐ роЪрпЖропрпНропроХрпНроХрпВроЯро┐роп",
    plasticFree: "рокро┐ро│ро╛ро╕рпНроЯро┐роХрпН роЗро▓рпНро▓ро╛род ро╡ро┐ро░рпБрокрпНрокроорпН",
    continue: "родрпКроЯро░ро╡рпБроорпН",
    bonusRewards: "рокрпЛройро╕рпН ро╡рпЖроХрпБроородро┐роХро│рпН"
  },
  te: {
    congratulations: "р░Ер░нр░┐р░ир░Вр░жр░ир░▓р▒Б!",
    coinsEarned: "р░╕р░Вр░кр░╛р░жр░┐р░Вр░Ър░┐р░и р░Ор░Хр▒Л-р░Хр░╛р░пр░┐р░ир▒Нр░▓р▒Б",
    impactMessage: "р░ор▒А р░╕р▒Нр░ер░┐р░░р░ор▒Ир░и р░Ор░Вр░кр░┐р░Х р░ор░╛р░░р▒Нр░кр▒Бр░ир▒Б р░др▒Ар░╕р▒Бр░Хр▒Кр░Ър▒Нр░Ър░┐р░Вр░жр░┐!",
    co2Saved: "р░Жр░жр░╛ р░Ър▒Зр░╕р░┐р░и COтВВ",
    benefits: "р░кр░░р▒Нр░пр░╛р░╡р░░р░г р░кр▒Нр░░р░пр▒Лр░Ьр░ир░╛р░▓р▒Б",
    lowCarbon: "р░др░Хр▒Нр░Хр▒Бр░╡ р░Хр░╛р░░р▒Нр░мр░ир▒Н р░кр░╛р░жр░ор▒Бр░жр▒Нр░░",
    compostable: "р░Хр░Вр░кр▒Лр░╕р▒Нр░Яр▒Н р░Ър▒Зр░пр░жр░Чр░┐р░и р░ор▒Жр░Яр▒Ар░░р░┐р░пр░▓р▒Нр░╕р▒Н",
    recyclable: "р░кр▒Вр░░р▒Нр░др░┐р░Чр░╛ р░░р▒Ар░╕р▒Ир░Хр░┐р░▓р▒Н р░Ър▒Зр░пр░жр░Чр░┐р░и",
    plasticFree: "р░кр▒Нр░▓р░╛р░╕р▒Нр░Яр░┐р░Хр▒Н р░░р░╣р░┐р░д р░Ор░Вр░кр░┐р░Х",
    continue: "р░Хр▒Кр░ир░╕р░╛р░Чр░┐р░Вр░Ър▒Б",
    bonusRewards: "р░мр▒Лр░ир░╕р▒Н р░░р░┐р░╡р░╛р░░р▒Нр░бр▒Нр░▓р▒Б"
  },
  bn: {
    congratulations: "ржЕржнрж┐ржиржирзНржжржи!",
    coinsEarned: "ржЕрж░рзНржЬрж┐ржд ржЗржХрзЛ-ржХржпрж╝рзЗржи",
    impactMessage: "ржЖржкржирж╛рж░ ржЯрзЗржХрж╕ржЗ ржкржЫржирзНржж ржкрж╛рж░рзНржержХрзНржп ржПржирзЗржЫрзЗ!",
    co2Saved: "рж╕ржВрж░ржХрзНрж╖рж┐ржд COтВВ",
    benefits: "ржкрж░рж┐ржмрзЗрж╢ржЧржд рж╕рзБржмрж┐ржзрж╛",
    lowCarbon: "ржХржо ржХрж╛рж░рзНржмржи ржкржжржЪрж┐рж╣рзНржи",
    compostable: "ржХржорзНржкрзЛрж╕рзНржЯржпрзЛржЧрзНржп ржЙржкржХрж░ржг",
    recyclable: "рж╕ржорзНржкрзВрж░рзНржг ржкрзБржирж░рзНржмрзНржпржмрж╣рж╛рж░ржпрзЛржЧрзНржп",
    plasticFree: "ржкрзНрж▓рж╛рж╕рзНржЯрж┐ржХ ржорзБржХрзНржд ржмрж┐ржХрж▓рзНржк",
    continue: "ржЪрж╛рж▓рж┐ржпрж╝рзЗ ржпрж╛ржи",
    bonusRewards: "ржмрзЛржирж╛рж╕ ржкрзБрж░рж╕рзНржХрж╛рж░"
  }
};

export const EcoCoinsReward: React.FC<EcoCoinsRewardProps> = ({
  option,
  selectedLanguage,
  onClose
}) => {
  const t = translations[selectedLanguage];

  // Calculate CO2 savings compared to standard packaging
  const standardCO2 = 120; // baseline CO2 for standard packaging
  const co2Saved = Math.max(0, standardCO2 - option.co2Footprint);

  // Calculate bonus points based on attributes
  const bonusPoints = [
    { condition: option.co2Footprint < 50, points: 10, label: t.lowCarbon },
    { condition: option.compostable, points: 8, label: t.compostable },
    { condition: option.recyclability >= 90, points: 5, label: t.recyclable },
    { condition: !option.materials.some(m => m.toLowerCase().includes('plastic')), points: 5, label: t.plasticFree }
  ].filter(bonus => bonus.condition);

  useEffect(() => {
    // Auto-close after 5 seconds
    const timer = setTimeout(() => {
      onClose();
    }, 5000);

    return () => clearTimeout(timer);
  }, [onClose]);

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="max-w-md w-full bg-gradient-to-br from-green-50 to-blue-50 border-green-200 relative overflow-hidden">
        <Button
          variant="ghost"
          size="icon"
          className="absolute top-2 right-2 z-10"
          onClick={onClose}
        >
          <X className="h-4 w-4" />
        </Button>

        {/* Celebration Animation */}
        <div className="absolute inset-0 pointer-events-none">
          <div className="absolute top-4 left-4 animate-bounce">
            <Sparkles className="h-6 w-6 text-yellow-500" />
          </div>
          <div className="absolute top-8 right-8 animate-bounce delay-300">
            <Sparkles className="h-4 w-4 text-green-500" />
          </div>
          <div className="absolute bottom-8 left-8 animate-bounce delay-700">
            <Sparkles className="h-5 w-5 text-blue-500" />
          </div>
        </div>

        <CardContent className="p-8 text-center space-y-6">
          {/* Header */}
          <div className="space-y-2">
            <div className="text-4xl animate-bounce">ЁЯОЙ</div>
            <h2 className="text-2xl font-bold text-green-700">{t.congratulations}</h2>
            <p className="text-gray-600">{t.impactMessage}</p>
          </div>

          {/* Main Reward */}
          <div className="bg-white rounded-xl p-6 border-2 border-green-200 shadow-lg">
            <div className="flex items-center justify-center gap-3 mb-4">
              <div className="bg-yellow-100 rounded-full p-3">
                <Coins className="h-8 w-8 text-yellow-600" />
              </div>
              <div>
                <div className="text-3xl font-bold text-yellow-600 animate-pulse">
                  +{option.ecoCoins}
                </div>
                <div className="text-sm text-gray-600">{t.coinsEarned}</div>
              </div>
            </div>

            {/* CO2 Impact */}
            <div className="flex items-center justify-center gap-2 text-green-600">
              <Leaf className="h-5 w-5" />
              <span className="font-medium">{co2Saved}g {t.co2Saved}</span>
            </div>
          </div>

          {/* Bonus Breakdown */}
          {bonusPoints.length > 0 && (
            <div className="space-y-3">
              <h3 className="text-lg font-semibold text-gray-700">{t.bonusRewards}</h3>
              <div className="space-y-2">
                {bonusPoints.map((bonus, index) => (
                  <div key={index} className="flex items-center justify-between p-2 bg-white/50 rounded-lg">
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                      <span className="text-sm">{bonus.label}</span>
                    </div>
                    <Badge className="bg-green-100 text-green-700">
                      +{bonus.points}
                    </Badge>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Environmental Benefits */}
          <div className="bg-green-50 rounded-lg p-4 border border-green-200">
            <h4 className="text-sm font-medium text-green-700 mb-2 flex items-center gap-1">
              <Recycle className="h-4 w-4" />
              {t.benefits}
            </h4>
            <div className="flex flex-wrap gap-1">
              {option.badges.map((badge, index) => (
                <Badge key={index} variant="secondary" className="text-xs bg-green-100 text-green-700">
                  {badge}
                </Badge>
              ))}
            </div>
          </div>

          {/* Continue Button */}
          <Button onClick={onClose} className="w-full bg-green-600 hover:bg-green-700">
            {t.continue}
          </Button>
        </CardContent>
      </Card>
    </div>
  );
};